{"ast":null,"code":"/*\n    promisified version of request with cache support\n*/\nvar request = require('request');\n\nvar cache = require('nano-cache');\n\nvar P = global.Promise;\n\nif (!P) {\n  console.warn('your nodejs version does not natively support global.Promise,' + ' you must pass your custom class, i.e. request.use(require(\"bluebird\")); ' + ' see https://github.com/akhoury/request-promise-cache#other-promise-libraries');\n}\n\nfunction hashCode(str) {\n  // https://stackoverflow.com/a/34842797/493756\n  return str.split('').reduce(function (prevHash, currVal) {\n    return (prevHash << 5) - prevHash + currVal.charCodeAt(0);\n  }, 0);\n}\n\nfunction promisifyAndCachifyRequest(r, options) {\n  r = r || request.defaults(options || {});\n  r._loading = {};\n  r._cache = new cache();\n\n  r._cache.on('del', function (key) {\n    delete r._loading[key];\n  });\n\n  r._cache.on('clear', function () {\n    r._loading = {};\n  });\n\n  var requestPromiseCache = function (params) {\n    var cacheEntry = {};\n    var promise = cacheEntry.promise = new P(function (resolve, reject) {\n      var fresh = params.fresh;\n      var cacheKey = params.cacheKey;\n      var cacheTTL = params.cacheTTL;\n      var cacheLimit = params.cacheLimit;\n\n      if ((cacheTTL || cacheLimit) && !cacheKey) {\n        cacheKey = hashCode(JSON.stringify(params));\n      }\n\n      delete params.fresh;\n      delete params.cacheKey;\n      delete params.cacheTTL;\n      delete params.cacheLimit;\n\n      if ((fresh || params.qs && params.qs._) && cacheKey) {\n        r._cache.del(cacheKey);\n      }\n\n      var get = (params.method || 'get').toLowerCase() === 'get';\n\n      if (get && cacheKey) {\n        var hit = r._cache.get(cacheKey);\n\n        if (hit) {\n          // only works if resolveWithFullResponse=true\n          // since body would be a primitive string and can't add property to it.\n          // and I don't want to use `new String(body)`\n          // anyways, this is not documented and I only use it for tests\n          hit.__fromCache = true;\n          resolve(hit);\n          return;\n        }\n\n        if (r._loading[cacheKey]) {\n          r._loading[cacheKey].promise.done ? r._loading[cacheKey].promise.done(resolve, reject) : r._loading[cacheKey].promise.then(resolve, reject);\n          return;\n        }\n\n        r._loading[cacheKey] = cacheEntry;\n      }\n\n      var resolveWithFullResponse = params.resolveWithFullResponse;\n      delete params.resolveWithFullResponse;\n      r(params, function (error, response, body) {\n        var ret = resolveWithFullResponse ? response : body;\n\n        if (error || response.statusCode < 200 || response.statusCode > 299) {\n          reject(error || response);\n        } else {\n          cacheKey && get && r._cache.set(cacheKey, ret, {\n            ttl: cacheTTL,\n            limit: cacheLimit\n          });\n          resolve(ret);\n        }\n\n        delete r._loading[cacheKey];\n      });\n    });\n    return promise;\n  };\n\n  requestPromiseCache.loading = r._loading;\n  requestPromiseCache.cache = r._cache;\n  return requestPromiseCache;\n}\n\nfunction defaults(defaults) {\n  var r = request.defaults(defaults || {});\n  return promisifyAndCachifyRequest(r);\n}\n\nvar requestPromiseCache = promisifyAndCachifyRequest(); // original request()\n\nrequestPromiseCache.original = request; // same as the original.defaults, but promisified\n\nrequestPromiseCache.defaults = defaults;\n\nrequestPromiseCache.use = function (CustomPromise) {\n  P = CustomPromise;\n  return requestPromiseCache;\n};\n\nmodule.exports = requestPromiseCache;","map":{"version":3,"sources":["D:/JavaTraining/FinalProjectWork/FrontEnd/node_modules/request-promise-cache/request-promise-cache.js"],"names":["request","require","cache","P","global","Promise","console","warn","hashCode","str","split","reduce","prevHash","currVal","charCodeAt","promisifyAndCachifyRequest","r","options","defaults","_loading","_cache","on","key","requestPromiseCache","params","cacheEntry","promise","resolve","reject","fresh","cacheKey","cacheTTL","cacheLimit","JSON","stringify","qs","_","del","get","method","toLowerCase","hit","__fromCache","done","then","resolveWithFullResponse","error","response","body","ret","statusCode","set","ttl","limit","loading","original","use","CustomPromise","module","exports"],"mappings":"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","sourcesContent":["/*\n    promisified version of request with cache support\n*/\n\nvar request = require('request');\nvar cache = require('nano-cache');\nvar P = global.Promise;\n\nif (! P) {\n    console.warn('your nodejs version does not natively support global.Promise,'\n        + ' you must pass your custom class, i.e. request.use(require(\"bluebird\")); '\n        + ' see https://github.com/akhoury/request-promise-cache#other-promise-libraries'\n    )\n}\n\nfunction hashCode (str) {\n    // https://stackoverflow.com/a/34842797/493756\n    return str.split('')\n        .reduce(function (prevHash, currVal) { return ((prevHash << 5) - prevHash) + currVal.charCodeAt(0) }, 0);\n}\n\nfunction promisifyAndCachifyRequest (r, options) {\n    r = r || request.defaults(options || {});\n    r._loading = {};\n    r._cache = new cache();\n    r._cache.on('del', function (key) {\n        delete r._loading[key];\n    });\n    r._cache.on('clear', function () {\n        r._loading = {};\n    });\n\n    var requestPromiseCache = function(params) {\n        var cacheEntry = {};\n        var promise = cacheEntry.promise = new P(function(resolve, reject) {\n\n            var fresh = params.fresh;\n            var cacheKey = params.cacheKey;\n            var cacheTTL = params.cacheTTL;\n            var cacheLimit = params.cacheLimit;\n\n            if ((cacheTTL || cacheLimit) && !cacheKey) {\n                cacheKey = hashCode(JSON.stringify(params));\n            }\n\n            delete params.fresh;\n            delete params.cacheKey;\n            delete params.cacheTTL;\n            delete params.cacheLimit;\n\n            if ((fresh || (params.qs && params.qs._)) && cacheKey) {\n                r._cache.del(cacheKey);\n            }\n\n            var get = (params.method || 'get').toLowerCase() === 'get';\n\n            if(get && cacheKey) {\n                var hit = r._cache.get(cacheKey);\n                if (hit) {\n                    // only works if resolveWithFullResponse=true\n                    // since body would be a primitive string and can't add property to it.\n                    // and I don't want to use `new String(body)`\n                    // anyways, this is not documented and I only use it for tests\n                    hit.__fromCache = true;\n                    resolve(hit);\n                    return;\n                }\n\n                if (r._loading[cacheKey]) {\n                    r._loading[cacheKey].promise.done ? r._loading[cacheKey].promise.done(resolve, reject) : r._loading[cacheKey].promise.then(resolve, reject);\n                    return;\n                }\n\n                r._loading[cacheKey] = cacheEntry;\n            }\n\n            var resolveWithFullResponse = params.resolveWithFullResponse;\n            delete params.resolveWithFullResponse;\n\n            r(params, function(error, response, body) {\n                var ret = resolveWithFullResponse ? response : body;\n\n                if (error || response.statusCode < 200 || response.statusCode > 299) {\n                    reject(error || response);\n                } else {\n                    cacheKey && get && r._cache.set(cacheKey, ret, {ttl: cacheTTL, limit: cacheLimit});\n                    resolve(ret);\n                }\n                delete r._loading[cacheKey];\n            });\n        });\n\n        return promise;\n    };\n\n    requestPromiseCache.loading = r._loading;\n    requestPromiseCache.cache = r._cache;\n    return requestPromiseCache;\n}\n\nfunction defaults (defaults) {\n    var r = request.defaults(defaults || {});\n    return promisifyAndCachifyRequest(r);\n}\nvar requestPromiseCache = promisifyAndCachifyRequest();\n\n// original request()\nrequestPromiseCache.original = request;\n\n// same as the original.defaults, but promisified\nrequestPromiseCache.defaults = defaults;\n\nrequestPromiseCache.use = function (CustomPromise) {\n    P = CustomPromise;\n    return requestPromiseCache;\n};\n\nmodule.exports = requestPromiseCache;\n\n"]},"metadata":{},"sourceType":"script"}